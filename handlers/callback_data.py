from aiogram import Router, F, types
from aiogram.fsm.context import FSMContext
from aiogram.utils.markdown import link
from aiogram.enums.parse_mode import ParseMode
from keyboards.available_sites import available_sites_kb
from keyboards.settings import settings_kb
from keyboards.key_words import key_words_kb
from keyboards.sending import sending_kb
from keyboards.abort_key_words import abort_key_words_kb
from keyboards.abort_sending import abort_sending_kb
from keyboards.week_days import week_days_kb
from keyboards.filters import filters_kb
from keyboards.change_time_slot_filter import change_time_slot_filter_kb
from keyboards.abort_change_time_slot_filter import abort_change_time_slot_filter_kb
from keyboards.back_to_premium import back_to_premium_kb
from keyboards.premium import premium_kb
from keyboards.default import default_kb
from callbacks.site_callback import SiteCallbackFactory
from callbacks.week_days_callback import WeekDaysCallbackFactory
from states import ChangeKeyWords, SendingTime, TimeSlot
from datetime import datetime, timedelta
import db, scheduler, config as config, main


router = Router()


@router.callback_query(SiteCallbackFactory.filter())
async def sites_func(callback: types.CallbackQuery, callback_data: SiteCallbackFactory):
    user_id = callback.from_user.id
    user_data = db.users.find_one({"user_id": user_id})
    user_sites = user_data["sites"]
    if config.SITES[callback_data.number] in user_sites:
        if len(user_sites) == 1:
            await callback.answer(text="–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –æ—Ç–∫–ª—é—á–∏—Ç—å –≤—Å–µ —Å–∞–π—Ç—ã, —É –≤–∞—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∞ —Ä–∞—Å—Å—ã–ª–∫–∞", show_alert=True)
        else: 
            user_sites.remove(config.SITES[callback_data.number])
            db.users.find_one_and_update({"user_id": user_id}, {"$set": {"sites": user_sites}})
            await callback.message.edit_reply_markup(reply_markup=available_sites_kb(user_id))
    else:
        if len(user_sites) == 2 and user_data["premium"] == False:
            await callback.answer(text="–î–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –±–æ–ª–µ–µ 2 —Å–∞–π—Ç–æ–≤ –∫—É–ø–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É", show_alert=True)
        else:
            db.users.find_one_and_update({"user_id": user_id}, {"$set": {"sites": user_sites + [config.SITES[callback_data.number]]}})
            await callback.message.edit_reply_markup(reply_markup=available_sites_kb(user_id))
    await callback.answer()


@router.callback_query(WeekDaysCallbackFactory.filter())
async def week_days_func(callback: types.CallbackQuery, callback_data: WeekDaysCallbackFactory):
    user_id = callback.from_user.id
    user_days = db.users.find_one({"user_id": user_id})["days"]
    if callback_data.number in user_days:
        user_days.remove(callback_data.number)
        db.users.find_one_and_update({"user_id": user_id}, {"$set": {"days": user_days}})
        await callback.message.edit_reply_markup(reply_markup=week_days_kb(user_id))
    else:
        db.users.find_one_and_update({"user_id": user_id}, {"$set": {"days": user_days + [callback_data.number]}})
        await callback.message.edit_reply_markup(reply_markup=week_days_kb(user_id))
    await callback.answer()


@router.callback_query(F.data == "back_to_settings")
async def back_to_settings_func(callback: types.CallbackQuery):
    await callback.message.edit_text("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚öôÔ∏è", reply_markup=settings_kb())
    await callback.answer()


@router.callback_query(F.data == "available_sites")
async def available_sites_func(callback: types.CallbackQuery):
    await callback.message.edit_text("–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–∞–π—Ç—ã (–¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ —Å–∞–π—Ç)", reply_markup=available_sites_kb(callback.from_user.id))
    await callback.answer()


@router.callback_query(F.data == "key_words")
async def key_words_func(callback: types.CallbackQuery, state: FSMContext):
    await state.clear()
    user_key_words = db.users.find_one({"user_id": callback.from_user.id})["keywords"]
    n = "\n"
    await callback.message.edit_text("–£ –≤–∞—Å –µ—â–µ –Ω–µ—Ç –∫–ª—é–µ–≤—ã—Ö —Å–ª–æ–≤" if user_key_words == [] else f'–í–∞—à–∏ –∫–ª—é—á–µ–≤—ã–µ–≤—ã–µ —Å–ª–æ–≤–∞:\n{n.join(user_key_words)}', reply_markup=key_words_kb())
    await callback.answer()


@router.callback_query(F.data == "change_key_words")
async def change_key_words_func(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.edit_text("–ù–∞–ø–∏—à–∏—Ç–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n\n–†–µ–º–æ–Ω—Ç, –≤–µ–Ω—Ç–∏–ª—è—Ü–∏—è, –∞—É–¥–∏—Ç", reply_markup=abort_key_words_kb())
    await state.set_state(ChangeKeyWords.input_words)
    await callback.answer()


@router.callback_query(F.data == "activate_sending")
async def activate_sending_func(callback: types.CallbackQuery, state: FSMContext):
    user_data = db.users.find_one({"user_id": callback.from_user.id})
    user_premium = user_data["premium"]
    user_keywords = user_data["keywords"]
    user_sites = user_data["sites"]
    if not user_premium:
        await callback.answer("–î–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏ —É –í–∞—Å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–¥–ø–∏—Å–∫–∞", show_alert=True)
    elif user_keywords == []:
        await callback.answer("–î–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞", show_alert=True)
    elif user_sites == []:
        await callback.answer("–î–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏ –≤—ã–±–µ—Ä–µ—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Å–∞–π—Ç", show_alert=True)
    else:
        await callback.message.edit_text(text="–ù–∞–ø–∏—à–∏—Ç–µ –≤—Ä–µ–º—è –≤ –∫–æ—Ç–æ—Ä–æ–µ –±–æ—Ç –±—É–¥–µ—Ç –ø–æ—Å—ã–ª–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é (–Ω–∞–ø—Ä–º–µ—Ä 11)", reply_markup=abort_sending_kb())
        await state.set_state(SendingTime.input_time)
    await callback.answer()


@router.callback_query(F.data == "deactivate_sending")
async def deactivate_sending_func(callback: types.CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    db.users.update_one({"user_id": user_id}, {"$set": {"time": False}})
    scheduler.scheduler.remove_job(str(user_id))
    await callback.answer("–í—ã –æ—Ç–∫–ª—é—á–∏–ª–∏ —Ä–∞—Å—Å—ã–ª–∫—É", show_alert=False)
    await callback.message.edit_text(text="–†–∞—Å—Å—ã–ª–∫–∞ üì´", reply_markup=sending_kb(user_id))
    await state.clear()
    await callback.answer()


@router.callback_query(F.data == "week_days")
async def week_days_func(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    await callback.message.edit_text(text="–î–Ω–∏ –Ω–µ–¥–µ–ª–∏ (–Ω–∞–∂–º–∏ –Ω–∞ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ —á—Ç–æ –±—ã –∏–∑–º–µ–Ω–∏—Ç—å)", reply_markup=week_days_kb(user_id))
    await callback.answer()


@router.callback_query(F.data == "sending")
async def sending_func(callback: types.CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    time = db.users.find_one({"user_id": user_id})["time"]
    if time:
        await callback.message.edit_text(text=f'–†–∞—Å—Å—ã–ª–∫–∞ üì´\n\n–°–µ–π—á–∞—Å –æ–Ω–∞ –ø–æ–¥–∫–ª—é—á–Ω–∞ –Ω–∞ {time}', reply_markup=sending_kb(user_id))
    else:
        await callback.message.edit_text(text="–†–∞—Å—Å—ã–ª–∫–∞ üì´", reply_markup=sending_kb(user_id))
    await state.clear()
    await callback.answer()


@router.callback_query(F.data == "filters")
async def filters_func(callback: types.CallbackQuery):
    await callback.message.edit_text(text="–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã", reply_markup=filters_kb())
    await callback.answer()


@router.callback_query(F.data == "time_slot_filter")
async def time_slot_filter_func(callback: types.CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    time_slot = db.users.find_one({"user_id": user_id})["filters"]["time_slot"]
    if time_slot == 1:
        message_text = f'–°–µ–π—á–∞—Å –ø–æ–∏—Å–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –ø–µ—Ä–∏–æ–¥–æ–º –≤ {time_slot} –¥–µ–Ω—å'
    elif time_slot < 5:
        message_text = f'–°–µ–π—á–∞—Å –ø–æ–∏—Å–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –ø–µ—Ä–∏–æ–¥–æ–º –≤ {time_slot} –¥–Ω—è'
    else:
        message_text = f'–°–µ–π—á–∞—Å –ø–æ–∏—Å–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –ø–µ—Ä–∏–æ–¥–æ–º –≤ {time_slot} –¥–Ω–µ–π'
    info_link = link("–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç —ç—Ç–æ—Ç —Ñ–∏–ª—å—Ç—Ä?", "https://telegra.ph/Informaciya-o-bote-01-06#–§–∏–ª—å—Ç—Ä—ã")
    await callback.message.edit_text(text=f'{message_text}\n\n{info_link}', reply_markup=change_time_slot_filter_kb(), parse_mode=ParseMode.MARKDOWN_V2, disable_web_page_preview=True)
    await state.clear()
    await callback.answer()


@router.callback_query(F.data == "change_time_slot_filter")
async def change_time_slot_filter_func(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.edit_text(text="–ù–∞–ø–∏—à–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –≤—Ä–µ–º–µ–Ω–∏ –≤ –¥–Ω—è—Ö(–æ—Ç 1 –¥–æ 7)", reply_markup=abort_change_time_slot_filter_kb())
    await state.set_state(TimeSlot.input_time_slot)
    await callback.answer()


@router.callback_query(F.data == "free_access")
async def free_access_func(callback: types.CallbackQuery, state: FSMContext):
    end_date = datetime.now() + timedelta(days=10)
    user_id = callback.from_user.id
    scheduler.scheduler.add_job(scheduler.pre_premium_end, id=f'free_access_{str(user_id)}', trigger="date", run_date=(end_date - timedelta(days=1)), args=[user_id])
    db.users.find_one_and_update({"user_id": user_id}, {"$set": {"premium": end_date}})
    await callback.message.edit_text(text="–í—ã –ø–æ–ª—É—á–∏–ª–∏ –ø—Ä–æ–±–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ 10 –¥–Ω–µ–π, –±–æ—Ç —É–≤–µ–¥–æ–º–∏—Ç –≤–∞—Å –æ–± –∏—Å—Ç–µ—á–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏", reply_markup=back_to_premium_kb())
    await callback.answer()


@router.callback_query(F.data == "premium")
async def premium_func(callback: types.CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    user_data = db.users.find_one({"user_id": user_id})
    user_premium = user_data["premium"]
    if user_premium == False:
        await callback.message.edit_text(text="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–∞—à–µ–π –ø–æ–¥–ø–∏—Å–∫–æ–π", reply_markup=premium_kb(user_data["trial_period"]))
    elif user_premium == True:
        await callback.message.edit_text(text="–£ –≤–∞—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –≤—Å–µ–≥–¥–∞, –ø—Ä–∏—è—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è")
    else:
        end_date = user_premium
        delta = user_premium - datetime.now()
        await callback.message.edit_text(text=f'–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –¥–æ {end_date.strftime("%d.%m %H:%M")} (–µ—â–µ {delta.days} –¥–Ω–µ–π)\n\n–ï—Å–ª–∏ –≤—ã –æ–ø–ª–∞—Ç–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É, —Ç–æ –æ–Ω–∞ –ø—Ä–æ–¥–ª–∏—Ç—å—Å—è –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Ç–µ–∫—É—â–µ–π', reply_markup=premium_kb(True))
    await callback.answer()


@router.callback_query(F.data == "buy_subscription")
async def buy_subscription_func(callback: types.CallbackQuery):
    await main.bot.send_invoice(chat_id=callback.from_user.id,
                                payload='None',
                                title="–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –º–µ—Å—è—Ü",
                                description="–í—ã –ø–æ–ª—É—á–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –º–µ—Å—è—Ü (30 –¥–Ω–µ–π)",
                                provider_token=config.PAYMENTS_TOKEN,
                                currency="rub",
                                photo_url="https://neftegaz.ru/upload/iblock/dd8/dd8c5131d662e4572b074717d70fc784.jpg",
                                photo_width=900,
                                photo_height=450,
                                is_flexible=False,
                                prices = [types.LabeledPrice(label="–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –º–µ—Å—è—Ü", amount=19900)],
                                start_parameter="one-month-subscription",)
    await callback.message.delete()


@router.callback_query(F.data == "get_start")
async def get_start_func(callback: types.CallbackQuery):
    await callback.message.answer(text="–û—Ç–ª–∏–Ω–æ! –ü—Ä–∏—è—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è", reply_markup=default_kb())
    await callback.message.delete()


@router.callback_query()
async def change_time_slot_filter_func(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer(text="–í —Ä–∞–∑—Ä–æ–±–æ—Ç–∫–µ", show_alert=True)